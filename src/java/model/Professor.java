package model;
// Generated 08/04/2015 07:36:29 by Hibernate Tools 3.6.0


import dao.ProfessorDAO;
import java.sql.SQLException;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Professor generated by hbm2java
 */
@Entity
@Table(name="professor"
    ,catalog="scp"
)
public class Professor  implements java.io.Serializable {


     private int numeroRegistroProfessor;
     private Usuario usuario;

    public Professor(int numeroRegistroProfessor, String areaAtuacao,Usuario usuario) {
        this.numeroRegistroProfessor=numeroRegistroProfessor;
        this.areaAtuacao = areaAtuacao;
        this.usuario=usuario;
        
    }
     private String areaAtuacao;
     
    public Professor() {
    }

	
    
   
     @Id 

    
    @Column(name="numeroRegistroProfessor", unique=true, nullable=false)
    public int getNumeroRegistroProfessor() {
        return this.numeroRegistroProfessor;
    }
    
    public void setNumeroRegistroProfessor(int numeroRegistroProfessor) {
        this.numeroRegistroProfessor = numeroRegistroProfessor;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="Usuario_cpf", nullable=false)
    public Usuario getUsuario() {
        return this.usuario;
    }
    
    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    
    @Column(name="areaAtuacao", length=45)
    public String getAreaAtuacao() {
        return this.areaAtuacao;
    }
    
    public void setAreaAtuacao(String areaAtuacao) {
        this.areaAtuacao = areaAtuacao;
    }

    public static List<Professor> obterProfessores () throws ClassNotFoundException, SQLException {
            return ProfessorDAO.obterProfessores();
    }
    
     

    public static Professor obterProfessor (int id) throws ClassNotFoundException, SQLException{
        return ProfessorDAO.obterProfessor(id);
        
    }

    public void gravar() throws SQLException, ClassNotFoundException{
        ProfessorDAO.gravar(this);
    }
    
    public void alterar() throws SQLException, ClassNotFoundException{
        ProfessorDAO.alterar(this);
    }
    public void excluir() throws SQLException, ClassNotFoundException{
        ProfessorDAO.excluir(this);
    }





}


